blueprint:
  name: Switch Controlled Light with State Sync
  description: Controls a light with a switch while maintaining state synchronization between them.
  domain: automation
  source_url: https://github.com/bradyemerson/homeassistant/blob/main/blueprints/automation/switch-controlled-light-with-sync.yaml
  input:
    switch_entity:
      name: Control Switch
      description: The switch that will control the cover
      selector:
        entity:
          domain: switch
    light_entity:
      name: Light
      description: The light to be controlled
      selector:
        entity:
          domain: light
    brightness_pct:
      name: Brightness
      description: Brightness percentage to set when the light is turned on
      default: 100
      selector:
        number:
          min: 1
          max: 100
          unit_of_measurement: "%"
    kelvin:
      name: Color Temperature
      description: Color temperature in Kelvin (optional)
      default: 0
      selector:
        color_temp:
          unit: kelvin
          min: 0
          max: 6500
    rgb_color:
      name: RGB Color
      description: RGB color values (optional)
      default: []
      selector:
        color_rgb:

variables:
  light_entity_var: !input "light_entity"

triggers:
  # Trigger on switch changes
  - trigger: state
    entity_id: !input switch_entity
    id: button-state-change
  # Trigger on blind state changes
  - trigger: state
    entity_id: !input light_entity
    id: light-state-change
    from: null
    to: null
  # Trigger on HA startup
  - trigger: homeassistant
    event: start
    id: hass-start-up

action:
  - choose:
      # Handle switch state changes
      - conditions:
          - condition: trigger
            id:
              - button-state-change
        sequence:
          - target:
              entity_id: !input light_entity
            action: |-
              {% if trigger.to_state.state == 'on' %}
                light.turn_on
              {% else %}
                light.turn_off
              {% endif %}
            data: >-
              {% set data = {} %}
              {% if brightness_pct and brightness_pct > 0 %}
                {% set data = data | combine({"brightness_pct": brightness_pct}) %}
              {% endif %}
              {% if kelvin and kelvin > 0 %}
                {% set data = data | combine({"kelvin": kelvin}) %}
              {% endif %}
              {% if rgb_color and rgb_color is sequence and rgb_color | length == 3 %}
                {% set data = data | combine({"rgb_color": rgb_color}) %}
              {% endif %}
              {{ data }}
      
      # Handle light state changes and HA startup
      - conditions:
          - condition: trigger
            id:
              - hass-start-up
              - light-state-change
        sequence:
          - target:
              entity_id: !input switch_entity
            action: |-
              {% if states(light_entity_var) == 'on' %}
                switch.turn_on
              {% elif states(light_entity_var) == 'off' %}
                switch.turn_off
              {% endif %}
